const CACHE_NAME="pdf-compressor-v1.0.0",CACHE_LIMIT=52428800,STATIC_ASSETS=["./","./index.html","./offline.html","./css/styles.css","./css/responsive.css","./js/app.js","./js/pdf-processor.js","./js/ui-controller.js","./js/storage-manager.js","./assets/icons/icon-72x72.png","./assets/icons/icon-96x96.png","./assets/icons/icon-128x128.png","./assets/icons/icon-144x144.png","./assets/icons/icon-152x152.png","./assets/icons/icon-192x192.png","./assets/icons/icon-384x384.png","./assets/icons/icon-512x512.png"],CDN_LIBRARIES=["https://cdn.jsdelivr.net/npm/pdf-lib@1.17.1/dist/pdf-lib.min.js","https://cdn.jsdelivr.net/npm/pdfjs-dist@3.4.120/build/pdf.min.js"],SYNC_TAG="pdf-processing-sync";function isStaticAsset(t){const e=new URL(t.url);return STATIC_ASSETS.includes(e.pathname)||e.pathname.startsWith("/assets/")||e.pathname.endsWith(".css")||e.pathname.endsWith(".js")}function isCDNLibrary(t){new URL(t.url);return CDN_LIBRARIES.some(e=>t.url.startsWith(e))}function isAPIRequest(t){const e=new URL(t.url);return e.pathname.startsWith("/api/")||e.hostname.includes("api.")||"application/json"===t.headers.get("Content-Type")}async function cacheFirstStrategy(t){try{const e=await caches.match(t);if(e)return e;const s=await fetch(t),n=await caches.open(CACHE_NAME);return await n.put(t,s.clone()),await manageCacheSize(),s}catch(e){return getOfflineFallback(t)}}async function staleWhileRevalidateStrategy(t){try{const e=await caches.match(t),s=fetch(t).then(async e=>{const s=await caches.open(CACHE_NAME);return await s.put(t,e.clone()),await manageCacheSize(),e});return e||s}catch(e){return getOfflineFallback(t)}}async function networkFirstStrategy(t){try{const e=await fetch(t);if(e.ok){const s=await caches.open(CACHE_NAME);await s.put(t,e.clone()),await manageCacheSize()}return e}catch(e){const s=await caches.match(t);return s||getOfflineFallback(t)}}async function cacheFirstWithNetworkFallback(t){try{const e=await caches.match(t);if(e)return e;const s=await fetch(t),n=await caches.open(CACHE_NAME);return await n.put(t,s.clone()),await manageCacheSize(),s}catch(e){return getOfflineFallback(t)}}async function getOfflineFallback(t){if("navigate"===t.mode){return(await caches.open(CACHE_NAME)).match("./offline.html")}return"image"===t.destination?new Response("",{status:404,statusText:"Not Found",headers:{"Content-Type":"text/plain"}}):new Response("Offline content",{status:503,statusText:"Service Unavailable",headers:{"Content-Type":"text/plain"}})}async function manageCacheSize(){const t=await caches.open(CACHE_NAME),e=await t.keys();let s=0;const n=[];for(const a of e){const e=await t.match(a);if(e){const t=e.clone(),i=(await t.blob()).size;s+=i,n.push({request:a,size:i,timestamp:Date.now()})}}if(s>52428800){n.sort((t,e)=>t.timestamp-e.timestamp);let e=0;for(const a of n){if(s-e<=41943040)break;await t.delete(a.request),e+=a.size}}}async function processSyncQueue(){const t=await self.clients.matchAll({type:"window"});if(!(t.length>0)){const t="PDF Processing Complete",e={body:"Your queued PDF operations have been processed.",icon:"./assets/icons/icon-192x192.png",badge:"./assets/icons/icon-72x72.png"};return self.registration.showNotification(t,e)}t[0].postMessage({type:"SYNC_COMPLETE"})}self.addEventListener("install",t=>{t.waitUntil(caches.open(CACHE_NAME).then(t=>t.addAll(STATIC_ASSETS)).then(()=>self.skipWaiting()))}),self.addEventListener("activate",t=>{t.waitUntil(caches.keys().then(t=>Promise.all(t.map(t=>{if(t!==CACHE_NAME)return caches.delete(t)}))).then(()=>self.clients.claim()))}),self.addEventListener("fetch",t=>{const{request:e}=t;"GET"===e.method&&(isStaticAsset(e)?t.respondWith(cacheFirstStrategy(e)):isCDNLibrary(e)?t.respondWith(staleWhileRevalidateStrategy(e)):isAPIRequest(e)?t.respondWith(networkFirstStrategy(e)):t.respondWith(cacheFirstWithNetworkFallback(e)))}),self.addEventListener("push",t=>{let e="PDF Compressor",s={body:"Your PDF processing is complete!",icon:"./assets/icons/icon-192x192.png",badge:"./assets/icons/icon-72x72.png"};if(t.data){const n=t.data.json();e=n.title||e,s.body=n.body||s.body,s.data=n}t.waitUntil(self.registration.showNotification(e,s))}),self.addEventListener("notificationclick",t=>{t.notification.close(),t.waitUntil(self.clients.matchAll({type:"window"}).then(t=>{for(const e of t)if("/"===e.url&&"focus"in e)return e.focus();if(self.clients.openWindow)return self.clients.openWindow("/")}))}),self.addEventListener("sync",t=>{t.tag===SYNC_TAG&&t.waitUntil(processSyncQueue())}),self.addEventListener("message",t=>{t.data&&"SKIP_WAITING"===t.data.type&&self.skipWaiting()});